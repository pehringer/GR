/*
  Lookup Tables Below:
*/

const _TEN_TO_POWER_NEGATIVE: [f64; 11] =
[
  1.0,
  0.1,
  0.01,
  0.001,
  0.0001,
  0.00001,
  0.000001,
  0.0000001,
  0.00000001,
  0.000000001,
  0.0000000001
];

const _TEN_TO_POWER_POSITIVE: [f64; 11] = 
[
  1.0,
  10.0,
  100.0,
  1000.0,
  10000.0,
  100000.0,
  1000000.0,
  10000000.0,
  100000000.0,
  1000000000.0,
  10000000000.0
];

/*
  Equivalent Characters
*/

//Bit flags for elements of CHAR_IS.
const _IS_ARGUMENT_CHAR: u8   = 0x01;
const _IS_DIGIT_CHAR: u8      = 0x02;
const _IS_NEWLINE_CHAR: u8    = 0x04;
const _IS_TEXT_CHAR: u8       = 0x08;
const _IS_WHITESPACE_CHAR: u8 = 0x10;

//Indexes are mapped to corresponding char values.
//Each element holds a given chars bit flags.
const CHAR_IS: [u8; 128] =
[
  0x00, //000
  0x00, //001
  0x00, //002
  0x00, //003
  0x00, //004
  0x00, //005
  0x00, //006
  0x00, //007
  0x00, //008
  0x18, //009 '\t'
  0x0C, //010 '\n'
  0x00, //011
  0x00, //012
  0x0C, //013 '\r'
  0x00, //014
  0x00, //015
  0x00, //016
  0x00, //017
  0x00, //018
  0x00, //019
  0x00, //020
  0x00, //021
  0x00, //022
  0x00, //023
  0x00, //024
  0x00, //025
  0x00, //026
  0x00, //027
  0x00, //028
  0x00, //029
  0x00, //030
  0x00, //031
  0x18, //032 ' '
  0x08, //033 '!'
  0x00, //034 '"'
  0x08, //035 '#'
  0x08, //036 '$'
  0x08, //037 '%'
  0x08, //038 '&'
  0x00, //039 '''
  0x00, //040 '('
  0x00, //041 ')'
  0x09, //042 '*'
  0x08, //043 '+'
  0x08, //044 ','
  0x08, //045 '-'
  0x08, //046 '.'
  0x08, //047 '/'
  0x0A, //048 '0'
  0x0A, //049 '1'
  0x0A, //050 '2'
  0x0A, //051 '3'
  0x0A, //052 '4'
  0x0A, //053 '5'
  0x0A, //054 '6'
  0x0A, //055 '7'
  0x0A, //056 '8'
  0x0A, //057 '9'
  0x08, //058 ':'
  0x08, //059 ';'
  0x08, //060 '<'
  0x08, //061 '='
  0x08, //062 '>'
  0x08, //063 '?'
  0x08, //064 '@'
  0x09, //065 'A'
  0x09, //066 'B'
  0x09, //067 'C'
  0x09, //068 'D'
  0x08, //069 'E'
  0x09, //070 'F'
  0x09, //071 'G'
  0x09, //072 'H'
  0x09, //073 'I'
  0x09, //074 'J'
  0x09, //075 'K'
  0x09, //076 'L'
  0x09, //077 'M'
  0x09, //078 'N'
  0x08, //079 'O'
  0x09, //080 'P'
  0x09, //081 'Q'
  0x09, //082 'R'
  0x09, //083 'S'
  0x09, //084 'T'
  0x08, //085 'U'
  0x08, //086 'V'
  0x08, //087 'W'
  0x09, //088 'X'
  0x09, //089 'Y'
  0x09, //090 'Z'
  0x08, //091 '['
  0x08, //092 '\'
  0x08, //093 ']'
  0x08, //094 '^'
  0x08, //095 '_'
  0x08, //096 '`'
  0x09, //097 'a'
  0x09, //098 'b'
  0x09, //099 'c'
  0x09, //100 'd'
  0x08, //101 'e'
  0x09, //102 'f'
  0x09, //103 'g'
  0x09, //104 'h'
  0x09, //105 'i'
  0x09, //106 'j'
  0x09, //107 'k'
  0x09, //108 'l'
  0x09, //109 'm'
  0x09, //110 'n'
  0x08, //111 'o'
  0x09, //112 'p'
  0x09, //113 'q'
  0x09, //114 'r'
  0x09, //115 's'
  0x09, //116 't'
  0x08, //117 'u'
  0x08, //118 'v'
  0x08, //119 'w'
  0x09, //120 'x'
  0x09, //121 'y'
  0x09, //122 'z'
  0x08, //123 '{'
  0x08, //124 '|'
  0x08, //125 '}'
  0x08, //126 '~'
  0x00  //127
];

fn main()
{
  let letter: char = 'A';
  let x: u8 = letter as u8;
  println!("Hello friend. {}", CHAR_IS[x as usize]);
}
